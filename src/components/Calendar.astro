---
import * as R from "remeda";
import Empty from "./Empty.astro";
import TimeSpan from "./TimeSpan.astro";

const { title } = Astro.props;

const content = `✂️ ${title}`

/** @example [18, 30] = 18:30 */
type Time = [number, number];

/**  @example [[18, 30], [19,30]] = 18:30-19:30 */
type TimeSpan = [Time, Time];

export interface Slot {
  timeSpan: TimeSpan;
  who: string;
  phone: string;
}

const names = [
  "Чика",
  "Алмаз",
  "Эмир",
  "Улук",
  "Була",
  "Бека",
  "Анвар",
  "Замир байке",
  "Anish",
  "Gukesh",
  "Серёга",
  "Улушка",
];

const slots = R.pipe(
  R.range(10, 21),
  R.map<number, Slot>((it) => ({
    timeSpan: [
      [it, 0],
      [it + 1, 0],
    ],
    who: names[it % names.length],
    phone: R.randomString(10),
  }))
);
---

<div class="calendar" data-day={content}>
  <ul class="time-span-list">
    {
      slots.map((slot) => (
        <>
          {Math.random() > 0.5 ? (
            <TimeSpan timeSlot={slot} />
          ) : (
            <Empty timeSlot={slot} />
          )}
        </>
      ))
    }
  </ul>
</div>

<style>
  .calendar {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 69w;
    padding: 1rem 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
  }

  .calendar::before {
    content: attr(data-day);
    font-variant-caps: all-small-caps;
    font-size: large;
    font-family: Aldrich;
    font-weight: 700;
    transform: rotate(-90deg);

    position: absolute;
    top: 35%;
    left: -1.5rem;
  }
  h2 {
    margin: 1rem 0.25rem;
    font-size: xx-large;
  }

  ul {
    margin: 0.25rem 0;
    padding: 0 0.25rem;

    list-style-type: none;
  }
</style>
